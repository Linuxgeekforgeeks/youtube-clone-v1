// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String?
  email                String?  @unique
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  subscribedChannelIds String[] @db.ObjectId
  likedVideosIds       String[] @db.ObjectId
  dislikeVideosIds     String[] @db.ObjectId
  account              Account?
  channel              Channel?
}

model Channel {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  handle          String
  imageSrc        String
  subscriberCount Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  comments        Comment[]
  videos          Video[]
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  videoId    String   @db.ObjectId
  channelId  String   @db.ObjectId
  text       String
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  channel    Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Video {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  channelId     String   @db.ObjectId
  title         String
  description   String
  likeCount     Int      @default(0)
  dislikeCount  Int      @default(0)
  viewCount     Int      @default(0)
  thumbnailSrc  String
  videoSrc      String
  channel       Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  comments      Comment[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId @unique
  type              String
  provider          String
  providerAccountId String
  refreshToken      String   @db.String
  accessToken       String   @db.String
  expireAt          Int
  tokenType         String?
  scope             String?
  idToken           String?  @db.String
  sessionState      String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
